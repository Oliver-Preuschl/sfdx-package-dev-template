# Copyright 2021 Oliver Preuschl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: "user:package:version:promote [master]"

on:
  workflow_dispatch:
    inputs:
      promoteLatestVersion:
        description: "Promote latest version (overwrites version number entered below)"
        type: boolean
      versionNumberToPromote:
        description: "Version number to promote"
        required: false
      releaseName:
        description: "Release name (default: version number)"
        required: false

env:
  RELEASE_NAME: ${{ github.event.inputs.releaseName }}

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        id: extract_branch_name
        shell: bash
        run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: "Checkout code"
        if: ${{ env.BRANCH == 'master' }}
        uses: actions/checkout@v4

      - name: "Setup Node"
        if: ${{ env.BRANCH == 'master' }}
        uses: actions/setup-node@v4

      - name: "Install npm dependencies"
        if: ${{ env.BRANCH == 'master' }}
        run: npm ci

      - name: "Install Salesforce CLI"
        if: ${{ env.BRANCH == 'master' }}
        run: npm install -g @salesforce/cli@latest --global

      - name: "Populate auth file with DEVHUB_AUTH_URL secret"
        if: ${{ env.BRANCH == 'master' }}
        shell: bash
        run: "echo ${{ secrets.DEVHUB_AUTH_URL}} > ./DEVHUB_AUTH_URL.txt"

      - name: "Authenticate Dev Hub"
        if: ${{ env.BRANCH == 'master' }}
        run: "sf org login sfdx-url --sfdx-url-file ./DEVHUB_AUTH_URL.txt --alias devhub --set-default-dev-hub"

      - name: "Get Package Name"
        id: get_package_name
        run: |
          chmod +x ./.github/scripts/getPackageAttribute.js
          package_name="$(node ./.github/scripts/getPackageAttribute.js name)"
          echo "PACKAGE_NAME=${package_name}" >> $GITHUB_ENV

      - name: "Get Package Version for entered Number"
        if: ${{ github.event.inputs.promoteLatestVersion == 'false' && github.event.inputs.versionNumberToPromote != '' }}
        id: get_package_version_for_entered_number
        run: |
          version_to_promote=$(sf package version list --packages "${{ env.PACKAGE_NAME }}" --order-by CreatedDate --concise | awk '$2 == "${{ github.event.inputs.versionNumberToPromote }}"' | awk '{print $3}')
          echo "VERSION_TO_PROMOTE=${version_to_promote}" >> $GITHUB_ENV

      - name: "Get latest Package Version"
        if: ${{ github.event.inputs.promoteLatestVersion == 'true' }}
        id: get_latest_package_version
        run: |
          version_to_promote=$(sf package version list --packages "${{ env.PACKAGE_NAME }}" --order-by CreatedDate --concise | tail -1 | awk '{print $3}')
          echo "VERSION_TO_PROMOTE=$version_to_promote" >> $GITHUB_ENV

      - name: "Promote Package Version"
        if: ${{ env.BRANCH == 'master' }}
        id: promote_package_version
        run: |
          sf package version promote --package ${{ env.VERSION_TO_PROMOTE }} --no-prompt

      - name: "Get Release Name from Project Config"
        if: ${{ github.event.inputs.releaseName == '' && github.event.inputs.promoteLatestVersion == 'false' }}
        run: |
          echo "RELEASE_NAME=${{ github.event.inputs.versionNumberToPromote }}" | sed 's/ //g' >> $GITHUB_ENV

      - name: "Get Release Name from Version Number"
        if: ${{ github.event.inputs.releaseName == '' && github.event.inputs.promoteLatestVersion == 'true' }}
        run: |
          echo "RELEASE_NAME=$(node ./.github/scripts/getProjectDefaultPackageDirectoryAttribute.js versionName)" | sed 's/ //g' >> $GITHUB_ENV

      - name: "Create Release"
        if: ${{ env.BRANCH == 'master' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.RELEASE_NAME }}"
          release_name: "Release ${{ env.RELEASE_NAME }}"
          body: |
            /packaging/installPackage.apexp?p0=${{ env.VERSION_TO_PROMOTE }}
          draft: false
          prerelease: false

      - name: "Save Package-Versions-JSON"
        if: ${{ env.BRANCH == 'master' }}
        id: save_package_versions
        run: |
          chmod +x ./.github/scripts/getPackageVersions.js
          node ./.github/scripts/getPackageVersions.js > ./sfdx-package-versions.json

      - name: "Build README"
        if: ${{ env.BRANCH == 'master' }}
        run: |
          chmod +x ./.github/scripts/buildReadme.js
          node ./.github/scripts/buildReadme.js "${{ env.BRANCH}}"

      - name: "Commit Changes"
        if: ${{ env.BRANCH == 'master' }}
        run: |
          git config user.name $GITHUB_ACTOR
          git config user.email activation@hundw.com
          git add sfdx-project.json sfdx-package-versions.json README.md
          git commit -m "Package Version Promoted"
          git push
